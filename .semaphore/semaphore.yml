version: v1.0


name: Pipeline

agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

blocks:
  - name: Install dependencies
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: CI
          value: 'true'

      # This block runs two jobs in parallel and they both share common
      # setup steps. We can group them in a prologue.
      prologue:
        commands:
          # Get the latest version of our source code from GitHub:
          - checkout
          # Use the version of Node.js specified in .nvmrc.
          - nvm use
          - node --version
          - npm --version
      jobs:
        # First parallel job:
        - name: npm install and cache
          commands:
            # Restore dependencies from cache. This command will not fail in
            # case of a cache miss. In case of a cache hit, npm install will
            # run very fast.
            # For more info on caching, see https://docs.semaphoreci.com/article/68-caching-dependencies
            - cache restore client-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),client-node-modules-$SEMAPHORE_GIT_BRANCH,client-node-modules-master
            - npm install
            # Store the latest version of node modules in cache to reuse in
            # further blocks:
            - cache store client-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json) node_modules

        # Second parallel job:
        # - name: server npm install and cache
        #   commands:
        #     - cd src/server
        #     - cache restore server-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),server-node-modules-$SEMAPHORE_GIT_BRANCH,server-node-modules-master
        #     - npm install
        #     - cache store server-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json) node_modules
  - name: Tests
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: CI
          value: 'true'
      prologue:
        commands:
          - checkout
          - nvm use
          - node --version
          - npm --version
      jobs:
        - name: Client Tests
          commands:
            - cache restore client-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),client-node-modules-$SEMAPHORE_GIT_BRANCH,client-node-modules-master
            - npm test

  # - name: E2e Tests
  #   task:
  #     env_vars:
  #       - name: NODE_ENV
  #         value: test
  #       - name: CI
  #         value: 'true'
  #     prologue:
  #       commands:
  #         - checkout
  #         - nvm use
  #         - node --version
  #         - npm --version
  #         # Start a Postgres database. On Semaphore, databases run in the same
  #         # environment as your code.
  #         # See https://docs.semaphoreci.com/article/32-ubuntu-1804-image#databases-and-services
  #         - sem-service start postgres
  #         # With unrestricted sudo access, you can install any additional
  #         # system package:
  #         - sudo apt-get install -y libgtk2.0-0
  #     jobs:
  #       - name: Client Tests
  #         commands:
  #           - cd src/client
  #           - cache restore client-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),client-node-modules-$SEMAPHORE_GIT_BRANCH,client-node-modules-master
  #           - npx cypress install
  #           - npm run test:e2e
  #       - name: Server Tests
  #         commands:
  #           - cd src/server
  #           - cache restore server-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),server-node-modules-$SEMAPHORE_GIT_BRANCH,server-node-modules-master
  #           - cp ormconfig.ci.json ormconfig.json
  #           - npm run migrate:up
  #           - npm run test:e2e

  - name: Deploy to firebase
    task:
      env_vars:
        - name: NODE_ENV
          value: test
        - name: CI
          value: 'true'
      prologue:
        commands:
          - checkout
          - nvm use
          - node --version
          - npm --version
      jobs:
        - name: deploy to host
          commands:
            # - cd src/client
            - npm install -g firebase-tools
            - cache restore client-node-modules-$SEMAPHORE_GIT_BRANCH-$(checksum package-lock.json),client-node-modules-$SEMAPHORE_GIT_BRANCH,client-node-modules-master
            - npm run build
            - firebase deploy --non-interactive --token $FIREBASE_TOKEN 